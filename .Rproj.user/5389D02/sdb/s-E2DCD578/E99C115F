{
    "collab_server" : "",
    "contents" : "require(shiny)\nrequire(shinysky)\nrequire(shinythemes)\nrequire(tidyverse)\nrequire(shinyBS)\nrequire(RISmed)\n\n# Find the next ID of a new record\n# (in mysql, this could be done by an incremental index)\nGetNextId <- function(i) {\n    if (exists(\"articles\") && nrow(articles) > 0) {\n        a <- gsub(\"([A-Z ]{7,25}:)\", \"$\\\\1\", articles$abstract[i], perl = TRUE)\n        a <- unlist(strsplit(a, \"\\\\$\"))\n        a <- a[a != \"\"]\n        return(a)\n    } else {\n        return (\"No more!\")\n    }\n}\n\nget.pubmed.data = function(search.elements){\n    res = EUtilsSummary(search.elements)\n    res_records = EUtilsGet(res)\n    res = data.frame(PMID(res_records),\n                     YearPubmed(res_records),          \n                     Title(res_records),\n                     ArticleTitle(res_records),\n                     AbstractText(res_records),\n                     Affiliation(res_records), \n                     stringsAsFactors = FALSE)\n    \n    colnames(res) = c(\"PMID\",\n                      \"Year\",\n                      \"Title\",\n                      \"ArticleTitle\",\n                      \"AbstractText\",\n                      \"Affiliation\")\n    return(res)\n}\n\n# IterateArticles <- function() {\n#     iterator <- iterator + 1\n#     return(iterator)\n# }\n\n# CSS to use in the app\nappCSS <-\n    \".mandatory_star { color: red; }\n.shiny-input-container { margin-top: 25px; }\n.select2-container {\n    width: 100% !important;\n}\n#submit_msg { margin-left: 15px; }\n#error { color: red; }\nbody { background: #fcfcfc; }\n#header { background: #fff; border-bottom: 1px solid #ddd; margin: -20px -15px 0; padding: 15px 15px 10px; }\n\"\n\nshinyApp(\n    ui = fluidPage(\n        theme = shinytheme(\"simplex\"),\n        shinyjs::useShinyjs(),\n        shinyjs::inlineCSS(appCSS),\n        title = \"Subset Clinical Trials\",\n        div(id = \"header\",\n            h1(\"Subset Clinical Trials\"),\n            strong( \n                span(\"Source\"),\n                a(\"on GitHub\", href = \"https://github.com/tempuslabs/compbio/tree/martin/patient_pubmed_search\"))\n        ),\n        \n        fluidRow(\n            column(3,\n                   div(\n                       id = \"form\",\n                       textInput(inputId = \"disease\", \n                                 label = \"Disease Search Terms:\", \n                                 placeholder = \"e.g. breast stage III\",\n                                 width = 300),\n                       textInput(inputId = \"gene\", \n                                 label = \"Gene:\",\n                                 placeholder = \"e.g. BRAF:\",\n                                 width = 300),\n                       textInput(inputId = \"variant\", \n                                 label = \"Gene Variant:\",\n                                 placeholder = \"e.g. V600E, amplification\",\n                                 width = 300),\n                       actionButton(\"submit\", \"Search\", class = \"btn-primary\"),\n                       br(),br(),\n                       actionButton(\"next_art\", \"Next Article\", class = \"btn-primary\"),\n                       actionButton(\"prev_art\", \"Previous Article\", class = \"btn-primary\")\n                   )\n                   ),\n                   \n            column(9,\n                   uiOutput(\"results\")\n            )\n        )\n    ),\n    \n    \n    server = function(input, output, session) {\n        values <- reactiveValues(i = 1)\n        # Update the PUBMED search on submit\n        updateTable <- eventReactive(input$submit, {\n            patient.data <- c(input$disease, \n                              input$gene,\n                              input$variant)\n            results <- get.pubmed.data(paste(patient.data, collapse = \" \"))\n            arrange(results, desc(Year))\n        })\n        \n        # Iterate articles if necessary\n        # IterateArticles <- reactive({\n        #     if(input$next_art){\n        #         iterator <- iterator + 1\n        #     }else if (input$prev_art){\n        #         print(\"YES\")\n        #         iterator <<- iterator - 1\n        #     } \n        # })\n        observe({\n            input$next_art\n            isolate({\n                values$i <- values$i + 1\n            })\n        })\n        \n        observe({\n            input$prev_art\n            isolate(values$i <- values$i - 1)\n        })\n        # render the clinical trials panel\n        output$results <- renderUI({\n            res <- updateTable()\n            div(\n                id = \"resultsPanel\",\n                h2(renderText(paste(nrow(updateTable()), \n                                    \" Search Results (\", \n                                    values$i, \n                                    \"of \",\n                                    nrow(updateTable()),\n                                    \")\"))),\n                h3(\"Journal (Year)\"),\n                renderText(paste(res$Title[values$i], \"(\", res$Year[values$i], \")\")),\n                h3(\"Article Title\"),\n                renderText(res$ArticleTitle[values$i]),\n                h3(\"Article Abstract\"),\n                renderText(res$Abstract[values$i]),\n                h3(\"Author Affiliations\"),\n                renderText(res$Affiliation[values$i])\n                # DT::renderDataTable(updateTable(), options = list(\n                #     autoWidth = TRUE,\n                #     columnDefs = list(list(width = '200px', targets = \"_all\"))\n                )\n        })\n    }\n)\n",
    "created" : 1485357489804.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "273964261",
    "id" : "E99C115F",
    "lastKnownWriteTime" : 1485364496,
    "last_content_update" : 1485364496692,
    "path" : "~/Dropbox/Tempus/compbio/patient_pubmed_search/app.R",
    "project_path" : "app.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}